// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusUser {
  Enable
  Disable
  IsPendingVerifyEmail
  IsPendingVerifyChangePassword
  IsPendingVerifyForgotPassword
}

enum Status {
  Enable
  Disable
}

enum Gender {
  Mail
  Femail
  Other
}

model usersV2 {
  id           Int        @id @default(autoincrement())
  username     String     @db.VarChar(255)
  password     String     @db.VarChar(255)
  full_name    String?    @db.VarChar(255)
  avatar       String?    @db.VarChar(255)
  dob          DateTime   @db.Timestamp(6)
  gender       Gender
  refreshToken String?    @db.VarChar(255)
  role         roles      @relation(fields: [role_id], references: [id])
  role_id      Int
  status       StatusUser
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @updatedAt @db.Timestamp(6)
}

model users {
  id           Int        @id @default(autoincrement())
  account      String     @unique @db.VarChar(255)
  name         String?    @db.VarChar(255)
  nationality  String?    @db.VarChar(255)
  chanalName   String?    @db.VarChar(255)
  avatar       String?    @db.VarChar(255)
  desciption   String?    @db.Text
  refreshToken String?    @db.VarChar(255)
  password     String     @db.VarChar(255)
  banner       String?    @db.VarChar(255)
  role         roles      @relation(fields: [role_id], references: [id])
  role_id      Int
  status       StatusUser
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @updatedAt @db.Timestamp(6)

  @@index([account])
  @@index([refreshToken])
}

model resources {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  roles        roles[]        @relation("RoleResource")
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  RoleResource RoleResource[]
}

model roles {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  users        users[]
  resources    resources[]    @relation("RoleResource")
  status       Status
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  RoleResource RoleResource[]
  usersV2      usersV2[]
}

model RoleResource {
  role_id     Int
  resource_id Int
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  resources   resources @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  @@id([role_id, resource_id]) // Tạo khóa chính kết hợp
}
