name: deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            set -e

            if [ ! -d "/root/docker" ]; then
                echo "Thư mục /root/docker không tồn tại. Tạo mới..."
                mkdir -p /root/docker
            fi

            # Navigate to docker directory
            cd /root/docker

            # Check if the repo directory exists and is not empty
            if [ ! -d "spotify_micro_service" ] || [ ! "$(ls -A /root/docker/spotify_micro_service)" ]; then
                echo "Repo chưa được clone. Tiến hành clone..."
                git clone https://github.com/lehau17/spotify_micro_service.git
            else
                echo "Repo đã tồn tại. Pull code mới nhất..."
                cd spotify_micro_service
                git pull origin main
            fi

            cd ./spotify_micro_service

            cd ./be_spotify_microservice

            # Write secrets to .env files
            echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> ./api-gateway/.env
            echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> ./api-gateway/.env
            echo "RATE_LIMIT_GLOBAL=${{ secrets.RATE_LIMIT_GLOBAL }}" >> ./api-gateway/.env
            echo "RATE_LIMIT_PUBLIC=${{ secrets.RATE_LIMIT_PUBLIC }}" >> ./api-gateway/.env
            echo "RATE_LIMIT_TTL=${{ secrets.RATE_LIMIT_TTL }}" >> ./api-gateway/.env
            echo "RATE_LIMIT_PRIVATE=${{ secrets.RATE_LIMIT_PRIVATE }}" >> ./api-gateway/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> ./api-gateway/.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> ./api-gateway/.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> ./api-gateway/.env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> ./api-gateway/.env

            # user service
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_USER_SERVICE }}" >> ./user-service/.env
            echo "ACCESS_TOKEN_KEY=${{ secrets.JWT_ACCESS_SECRET }}" >> ./user-service/.env
            echo "REFRESH_TOKEN_KEY=${{ secrets.JWT_REFRESH_SECRET }}" >> ./user-service/.env
            echo "URL_BACKEND=${{ secrets.URL_BACKEND }}" >> ./user-service/.env
            echo "VERIFY_TOKEN_KEY=${{ secrets.VERIFY_TOKEN_KEY }}" >> ./user-service/.env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> ./user-service/.env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> ./user-service/.env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> ./user-service/.env
            echo "REDIS_DB=${{ secrets.REDIS_DB }}" >> ./user-service/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> ./user-service/.env

            cd ..
            # Docker commands
            echo "Dừng các container đang chạy..."
            docker-compose down || echo "Không có container nào đang chạy."

            echo "Build lại các container..."
            docker-compose build || echo "Không có container nào để build lại"

            echo "Khởi chạy các container..."
            docker-compose up -d

            # Dọn dẹp các hình ảnh Docker không cần thiết
            echo "Dọn dẹp các hình ảnh Docker không dùng..."
            dangling_images=$(docker images -f "dangling=true" -q)
            if [ -n "$dangling_images" ]; then
                echo "$dangling_images" | xargs docker rmi || echo "Không thể xóa các hình ảnh."
            else
                echo "Không có hình ảnh Docker nào cần dọn dẹp."
            fi

            echo "Quá trình triển khai hoàn tất!"
