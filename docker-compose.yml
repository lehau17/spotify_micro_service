services:
  api-gateway:
    container_name: api-gateway
    build: ./be_spotify_microservice/api-gateway
    ports:
      - 3000:3000
    networks:
      - node-network
    # depends_on:
    #   - rabbitmq
    #   - redis
    # environment:
    #   - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    #   - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    #   - RATE_LIMIT_GLOBAL=${RATE_LIMIT_GLOBAL}
    #   - RATE_LIMIT_PUBLIC=${RATE_LIMIT_PUBLIC}
    #   - RATE_LIMIT_TTL=${RATE_LIMIT_TTL}
    #   - RATE_LIMIT_PRIVATE=${RATE_LIMIT_PRIVATE}
    #   - REDIS_PORT=${REDIS_PORT}
    #   - REDIS_HOST=${REDIS_HOST}

  user-service:
    container_name: user-service
    build: ./be_spotify_microservice/user-service
    networks:
      - node-network
  discuss-service:
    container_name: discuss-service
    build: ./be_spotify_microservice/discuss-service
    networks:
      - node-network
  following-service:
    container_name: following-service
    build: ./be_spotify_microservice/following-service
    networks:
      - node-network
  genre-service:
    container_name: genre-service
    build: ./be_spotify_microservice/genre-service
    networks:
      - node-network
  like-song-service:
    container_name: like-song-service
    build: ./be_spotify_microservice/like-song-service
    networks:
      - node-network
  playlist-service:
    container_name: playlist-service
    build: ./be_spotify_microservice/playlist-service
    networks:
      - node-network
  recentSong-service:
    container_name: recentSong-service
    build: ./be_spotify_microservice/recentSong-service
    networks:
      - node-network
  song-service:
    container_name: song-service
    build: ./be_spotify_microservice/song-service
    networks:
      - node-network

  upload-service:
    container_name: upload-service
    build: ./be_spotify_microservice/upload-service
    networks:
      - node-network
    # depends_on:
    #   - postgres
    # environment:
    #   - DATABASE_URL=${DATABASE_URL_USER_SERVICE}
    #   - ACCESS_TOKEN_KEY=${JWT_ACCESS_SECRET}
    #   - REFRESH_TOKEN_KEY=${JWT_REFRESH_SECRET}

  # rabbitmq:
  #   container_name: some-rabbit
  #   image: rabbitmq:3-management
  #   environment:
  #     RABBITMQ_DEFAULT_USER: admin
  #     RABBITMQ_DEFAULT_PASS: 1234
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   networks:
  #     - node-network

  # redis:
  #   container_name: some-redis
  #   image: redis:latest
  #   environment:
  #     REDIS_PASSWORD: 1234 # Mật khẩu cho Redis
  #   ports:
  #     - 6379:6379
  #   networks:
  #     - node-network
  #   command: ["redis-server", "--requirepass", "1234"]
  #   volumes:
  #     - redis-data:/data

  # postgres:
  #   container_name: some-postgres
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: 1234
  #   ports:
  #     - 5432:5432
  #   networks:
  #     - node-network
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - ./volumes/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

networks:
  node-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
